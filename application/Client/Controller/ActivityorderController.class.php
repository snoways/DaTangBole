<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/11/23 0023
 * Time: 23:18
 * 活动订单控制器
 */

namespace Client\Controller;
use Parents\Controller\AlipayController;
use Parents\Controller\WxAppPayController;
use Think\Exception;

class ActivityorderController   extends MapiBaseController{

    protected $user_id;

    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $data =  $this->data;
        $uid = S($data['token'])?S($data['token']):0;
//        $uid = 26;
        if($uid){
            $this->user_id = $uid;
        }else{
            $this->ApiReturn(20003,'token无效或已过期');
        }
    }

    /**
     *  订单列表
     */
    function index()
    {
        $data = $this->data;
        $status = $data['status'];
        $page = $data['page']?$data['page']:1;
        $where =  array('o.uid'=>$this->user_id);
        if ($status) $where['o.status'] =  $status;
        $list = D('ActivityOrder')
            ->alias('o')
            ->join('__ACTIVITY__ a on o.activity_id = a.id')
            ->join('left join fzm_activity_attr as p on o.attr_id = p.id')
            ->field('o.id,o.sn,o.sign_time,o.start_date,o.pay_money,o.group_discount_amount,o.spell_id,o.paytype,o.user_name,o.phone,o.status,a.title,a.extra_title,a.money as price,a.id as act_id,p.title as attr_title,a.img as img,p.price as attr_price')
            ->page($page,8)
            ->where($where)
            ->select();
        if($list){
            $act_order_detail = D('act_order_detail');
            foreach ($list as &$item) {
                $baomin = $act_order_detail->where(['order_id'=>$item['id']])->getField('member_type',true);
                $adult = count($baomin,1);
                $child = count($baomin,2);
                $item['baomin'] = ($adult?$adult.'成人':'').($child?$child.'儿童':'');
                $item['order_money'] = sprintf('%.2f',$item['pay_money']+$item['group_discount_amount']);
                unset($baomin);
                unset($adult);
                unset($child);
            }
            $this->ApiReturn(1,'成功',$list);
        }else{
            $this->ApiReturn(0,'成功',array());
        }
    }

    /*
     * 订单详情
     */
    public function orderDetails()
    {
        $data = $this->data;
        $id = (int)$data['id']?$data['id']:$this->ApiReturn(-1,'缺少参数id');
        $where =  array('o.uid'=>$this->user_id);
        $where['o.id'] = $id;
        $act_order_detail = D('ActivityOrder');
        $info = $act_order_detail
            ->alias('o')
            ->join('__ACTIVITY__ a on o.activity_id = a.id')
            ->join('left join fzm_activity_attr as p on o.attr_id = p.id')
            ->field('o.id,o.sn,o.sign_time,o.start_date,o.pay_money,o.group_discount_amount,o.paytype,o.user_name,o.phone,o.status,o.description,a.title,a.img,a.extra_title,a.target,a.age_min,a.age_max,a.id as act_id,p.title as attr_title,p.price,p.bazar_price,o.spell_id')
            ->where($where)
            ->find();
        $info['order_money'] = sprintf('%.2f',$info['pay_money']+$info['group_discount_amount']);
        $ActivitySpell = D('ActivitySpell');
        if ($info['spell_id']) {
            $people_num = $ActivitySpell->where(['id'=>$info['spell_id']])->field('(people_num - current_num) as people_num,status as spell_status')->find();
            $info = array_merge($info,$people_num);
            unset($people_num);
        }
        if ($info['age_max'] == 0) {
            $info['age_title'] = $info['age_min'].'岁以上';
        } else {
            $info['age_title'] = $info['age_min'].'-'.$info['age_max'].'岁';
        }
        unset($info['age_max']);
        unset($info['age_min']);
        if (!$info) $this->ApiReturn(-1,'订单不存在');
        $info['details'] = D('ActOrderDetail')
            ->where(array('order_id'=>$id))
            ->field('member_name,member_type,sex,id_type,id_num')
            ->select();
        $baomin = array_column($info['details'],'member_type');
        $adult = count($baomin,1);
        $child = count($baomin,2);
        $info['baomin'] = ($adult?$adult.'成人':'').($child?$child.'儿童':'');
        $this->ApiReturn(1,'成功',$info);
    }

    /*
     * 拼团详情
     */
    public function spellOrderDetails()
    {
        $data = $this->data;
        $id = $data['id']?$data['id']:$this->ApiReturn(-1,'缺少参数id');
        $where =  array('o.uid'=>$this->user_id);
        $where['o.id'] = $id;
        $info = D('ActivityOrder')
            ->alias('o')
            ->join('__ACTIVITY__ a on o.activity_id = a.id')
            ->join('left join fzm_activity_attr as p on o.attr_id = p.id')
            ->field('o.id,o.sn,o.status,a.title,a.img,a.extra_title,a.target,a.age_min,a.age_max,a.id as act_id,p.title as attr_title,p.price,p.bazar_price,o.spell_id')
            ->where($where)
            ->find();
        if (!$info) $this->ApiReturn(-1,'订单不存在');
        $ActivitySpell = D('ActivitySpell');
        if ($info['spell_id']) {
            $people_num = $ActivitySpell->where(['id'=>$info['spell_id']])->field('(people_num - current_num) as people_num,status as spell_status')->find();
            $info = array_merge($info,$people_num);
            unset($people_num);
        }
        if ($info['age_max'] == 0) {
            $info['age_title'] = $info['age_min'].'岁以上';
        } else {
            $info['age_title'] = $info['age_min'].'-'.$info['age_max'].'岁';
        }
        unset($info['age_max']);
        unset($info['age_min']);
        if($info['spell_id'] > 0){
            $spells = $ActivitySpell
                ->alias('s')
                ->join('fzm_activity_order as o on s.id = o.spell_id')
                ->join('__PARENTS__ u on o.uid = u.id')
                ->where(array('s.id'=>$info['spell_id']))
                ->order('commander desc')
                ->field('u.p_img as avatar,u.parent_name as name,o.commander')
                ->select();
            $info['spells'] = $spells;
        }
        $this->ApiReturn(1,'成功',$info);
    }


    /*
     * 选择日期和人数
     */
    public function dateAndPeopleNum()
    {

        $data = $this->data;
        $ym = $data['type']; //1当月  2 下月 3 下下月
        try {
            $code = -1;
            $info = [];
            $activity   = M('activity');
            $activity_order   = M('activity_order');
            $activity_attr    = M('activity_attr');
            $around_time = M('around_time');
            $act_id = $data['act_id']?$data['act_id']:$this->ApiReturn($code,'请选择活动');
            $act_attr_id = $data['act_attr_id']?$data['act_attr_id']:$this->ApiReturn($code,'请选择套餐');
            $attr = $activity_attr
                ->where(['act_id'=>$act_id,'id'=>$act_attr_id])
                ->field('price,adult,child')
                ->find();
            $month_now = date('m');//当月月份
            $yer = date('Y'); //当前年
            switch ($ym) {
                case 1:$days = date('t'); $month = $month_now;break;
                case 2:
                    if ($month_now == 12) {
                        $yer += 1;
                        $month = 1;//月份
                    } else {
                        $month = $month_now+1;
                    }
                    $days = date('t',strtotime("{$yer}-{$month}-01")); //天数
                    break;
                case 3:
                    if ($month_now == 12) {
                        $yer += 1;
                        $month = 2;//月份
                    } else {
                        if ($month_now+1 == 12) {
                            $yer += 1;
                            $month = 1;//月份
                        } else {
                            $month = $month_now+2;//月份
                        }
                    }
                    $days = date('t',strtotime("{$yer}-{$month}-01")); //天数

                    break;
            }
            $at_data = $around_time
                ->where(['item_id'=>$act_id,'start'=>['between',["{$yer}-{$month}-01","{$yer}-{$month}-{$days}"]]])
                ->field('id,start')
                ->select();
            $people_num = $activity->where(['id'=>$act_id])->getField('people_num');
            $msg  = '该活动已结束';
            if ($attr) {
                $code = 1;
                $msg = 'success';
                $info = $attr;
//                $info['ss'] = $around_time->getLastSql();
//                $info['aa'] = $at_data;
                $date_time = date("Y-m-d");
                unset($info['price']);
                for ($i=1;$i<=$days;$i++) {
                    $status = '0';
                    $price = '0.00';
                    $around_time_id = '0';
                    if (!empty($at_data)) {
                        $num = '0';
                        for ($j=0;$j<count($at_data);$j++) {
                            if ($date_time < $at_data[$j]['start']) {
                                if (date('d',strtotime($at_data[$j]['start']))==$i) {
                                    $status = 1;
                                    $price = $attr['price'];
                                    $around_time_id = $at_data[$j]['id'];
                                    $where = [
                                        'ao.activity_id'=>$act_id,
                                        'ao.attr_id'=>$act_attr_id,
                                        'ao.time_id'=>$around_time_id,
                                        'ao.status'=>2
                                    ];
                                    $number = $activity_order
                                        ->alias('ao')
                                        ->join('LEFT JOIN __ACT_ORDER_DETAIL__ aod on ao.id = aod.order_id')
                                        ->where($where)
                                        ->field("COUNT('aod.*') as num")
                                        ->find();
                                    $num = $people_num;
                                    if ($number['num']) $num = (string)($people_num - $number['num']);
                                }
                            }
                        }
                    }
                    $info['days'][] = [
                        'day'=>"{$i}",
                        'status'=>$status,
                        'around_time_id'=>$around_time_id,
                        'price'=>$price,
                        'people_num'=>$num,
                    ];
                }
            }
        } catch (Exception $e) {
            $code = -1;
            $msg  = $e->getMessage();
        }
        $this->ApiReturn($code,$msg,$info);
    }


    /*
     *  普通下单
     */
    function createOrder()
    {

        $this->ApiReturn(1,'下单成功',$this->createOrderAction());
    }

//    /*
//     * 参团下单
//     */
//    public function spellCreateOrder()
//    {
//        $data = $this->data;
//        $spell_id = $data['spell_id']?? $this->ApiReturn(-1,'缺少参数：spell_id',[]);
//        D('ActivityOrder')->where(['spell_id'=>$spell_id,'commander'=>1])->find();
//    }

    /**
     *  拼团
     */

    public function spell()
    {
//        $this->ApiReturn(1,'下单成功',$this->createOrderAction());
        $data = $this->data;
        $act_id = $data['act_id']?$data['act_id']:0;
        $spell_id = $data['spell_id']?$data['spell_id']:0;
        $comm = $data['spell_id']?1:0;
        $ActivitySpell = D('ActivitySpell');
        M()->startTrans();
        if ($spell_id) {
            $spell = $ActivitySpell->where(array('id'=>$spell_id,'status'=>1))->find();
            if($spell['people_num'] >= $spell['current_num']){
                $this->ApiReturn(-1,'该拼团数量已满');
            }
//            if(!$ActivitySpell->where(array('id'=>$spell_id))->setInc('current_num')){
//                $this->ApiReturn(-1,'拼团失败');
//            }

        } else {
            $spell_max = D('Activity')->where(array('id'=>$act_id))->getField('spell_max');
            $spellOrder = array(
                'act_id'=>$act_id,
                'create_time'=>date('Y-m-d H:i:s'),
                'people_num'=>$spell_max['spell_max'],
                'current_num'=>1,
            );
            $spell_id = $ActivitySpell->add($spellOrder);
            if (!$spell_id)
                $this->ApiReturn(-1,'开团失败');
        }
        $res = $this->createOrderAction($spell_id,$comm);
        if($res){
            $this->ApiReturn(1,'拼团成功',$res);
        }

    }

    /** 生成订单 */
    private function createOrderAction($spell_id=0,$commander = 0)
    {
        $data = $this->data;
        $act_id = $data['act_id']?$data['act_id']:0;
        $attr_id = $data['act_attr_id']?$data['act_attr_id']:$this->ApiReturn(-1,'请选择套餐');
        $passengers = trim($data['passengers'],',')?trim($data['passengers'],','):'';
        $passengers = explode(',',$passengers);
        $around_time_id = $data['around_time_id']?$data['around_time_id']:$this->ApiReturn(-1,'请选择出游日期');
        if(empty($passengers)) $this->ApiReturn(-1,'请选择出行人');
        $passengers_list = D('ActPassenger')
            ->where(array('id'=>array('in',$passengers)))
            ->select();
        if (count($passengers_list) != count($passengers)) $this->ApiReturn(-1,'出行人不正确');
        $name = $data['name']?$data['name']:$this->ApiReturn(-1,'请填写联系人姓名');
        $phone = $data['phone']?$data['phone']:$this->ApiReturn(-1,'请填写联系人手机号');
        $description = $data['desc']?$data['desc']:'';

        $activity = D('Activity')->where(array('id'=>$act_id))->field('shop_id,title,state,status,spell,spell_refund,people_num,spell_max')->find();
        if($activity['state'] != 1 || $activity['status'] != 1){
            $this->ApiReturn(-1,'该活动已下架或已结束');
        }
        $activity_attr = M('activity_attr')->where(['act_id'=>$act_id,'id'=>$attr_id])->field('title,adult,child')->find();
        if(!$activity_attr) $this->ApiReturn(-1,'该套餐已下架或已结束');
        $start_time = M('around_time')->where(['item_id'=>$act_id,'id'=>$around_time_id])->getField('start');
        if(!$start_time) $this->ApiReturn(-1,'该出行日期已下架或已结束');
        $activity_order = D('ActivityOrder');
        $where = [
            'ao.activity_id'=>$act_id,
            'ao.attr_id'=>$attr_id,
            'ao.time_id'=>$around_time_id,
            'ao.status'=>2
        ];
        $number = $activity_order
            ->alias('ao')
            ->join('LEFT JOIN __ACT_ORDER_DETAIL__ aod on ao.id = aod.order_id')
            ->where($where)
            ->field("COUNT('aod.*') as num")
            ->find();
        //套餐活动 出行日期剩余的人数
        $remaining = $activity['people_num']-$number['num'];
        //判断剩余数量是否满足当前订单
        if ($remaining <= 0 || $remaining < count($passengers)) $this->ApiReturn(-1,'当前套餐的出行日期剩余数量不足，请重新选择');

        $sn = "A".sp_get_order_sn();
        $pay_money = 0;
        $adult = 0;
        $child = 0;
        $item = [];
        foreach ($passengers_list as $per){
            $item[] = [
                'member_name'=>$per['name'],
                'sex'=>$per['sex'],
                'member_type'=>$per['u_type'],
                'id_type'=>$per['id_type'],
                'id_num'=>$per['id_num']
            ];
            if($per['u_type'] == 1){
                $pay_money += $activity_attr['adult'];
                $adult++;
            }else{
                $pay_money += $activity_attr['child'];
                $child++;
            }
        }
        //拼团优惠金额
        $group_discount_amount = 0;
        //如果是拼团订单
        if ($spell_id) {
            $pay_money -= $activity['spell_refund'];
            $group_discount_amount = $activity['spell_refund'];
        }
        if ($pay_money <= 0) $this->ApiReturn(-1,'订单金额异常');
        $money = $pay_money;//商户实际应得的钱
        $platform_money = 0;
        if ($activity['shop_id'] > 0) {
            $huodong_ratio = M('smalltable_ratio')->where(['agent_id'=>$activity['shop_id']])->getField('huodong_ratio');
            if ($huodong_ratio > 0) {
                $platform_money = sprintf('%.2f',$pay_money * $huodong_ratio / 100); //平台应得的钱
                if ($platform_money < $money && $platform_money > 0) {
                    $money = $pay_money - $platform_money; //商户实际应得的钱
                }
            }
        } else {
            $st_id = M('parents')->where(['id'=>$this->user_id])->getField('st_id');
            //有直属代理商上级
            if ($st_id > 0) {
                $huodong_ratio = M('direct_agent_ratio')->where(['agent_id'=>$st_id])->getField('huodong_ratio');
                if ($huodong_ratio > 0) {
                    $platform_money = sprintf('%.2f',$pay_money * $huodong_ratio / 100); //平台应得的钱
                    if ($platform_money < $money && $platform_money > 0) {
                        $money = $pay_money - $platform_money; //商户实际应得的钱
                    }
                }
            }
        }
        $act = array(
            'uid'=>$this->user_id,
            'st_id'=>$activity['shop_id'],
            'activity_id'=>$act_id,
            'sign_time'=>date('Y-m-d H:i:s'),
            'start_date'=>$start_time,
            'time_id'=>$around_time_id,
            'attr_id'=>$attr_id,
            'sn'=>$sn,
            'user_name'=>$name,
            'phone'=>$phone,
            'description'=>$description,
            'platform_money'=>$platform_money,
            'money'=>$money,
            'pay_money'=>$pay_money,
            'spell_id'=>$spell_id,
            'group_discount_amount'=>$group_discount_amount,
            'commander'=>$commander
        );
        $order_id = $activity_order->add($act);

        if($order_id){
            if (M('act_order_detail')->addAll($item)) {
                D('ActivityOrder')->commit();
                return array(
                    'order_id'=>$order_id,
                    'sn'=>$sn,
                    'act_title'=>$activity['title'],
                    'attr_title'=>$activity_attr['title'],
                    'date_time'=>$start_time,
                    'adult'=>$adult,
                    'child'=>$child,
                    'money'=>sprintf('%.2f',$pay_money+$group_discount_amount),
                    'pay_money'=>$pay_money
                );
            } else {
                M()->rollback();
                $this->ApiReturn(-1,'创建订单详情失败');
            }
        } else {
            M()->rollback();
            $this->ApiReturn(-1,'创建订单失败');
        }

    }

    /**
     * 行人列表
     */
    public function passengerList()
    {

        $list = D('ActPassenger')->where(array('user_id'=>$this->user_id))->select();
        if($list){
            $this->ApiReturn(1,'成功',$list);
        }
        $this->ApiReturn(0,'成功',array());
    }

    /**
     * 准备工作完毕 开始计算年龄函数
     * @param  $birthday 出生时间 uninx时间戳
     * @param  $time 当前时间
     **/
    function getAge($birthday)
    {
        //格式化出生时间年月日
         $byear=date('Y',$birthday);
         $bmonth=date('m',$birthday);
         $bday=date('d',$birthday);

         //格式化当前时间年月日
         $tyear=date('Y');
         $tmonth=date('m');
         $tday=date('d');

         //开始计算年龄
         $age=$tyear-$byear;
         if($bmonth>$tmonth || $bmonth==$tmonth && $bday>$tday){
                $age--;
         }
         return $age;
    }

    /*
     * 编辑添加行人
     */
    public function passenger()
    {
        $data = $this->data;
        if(!$data['name']){
            $this->ApiReturn(-1,'请填写姓名');
        }
        if (!$data['sex']){
            $this->ApiReturn(-1,'请选择性别');
        }
        if (!$data['id_type']){
            $this->ApiReturn(-1,'请选择证件类型');
        }
        if (!$data['birth']){
            $this->ApiReturn(-1,'请填写生日');
        }
        if($data['u_type'] == 1 && !$data['id_num']){
            $this->ApiReturn(-1,'请填写证件号');
        }
        $id = 0;
        if($data['id']){
            try{
               D('ActPassenger')->where(array('id'=>$data['id']))->save($data);
               $id = $data['id'];
               $msg = '编辑成功';
            }catch (\Exception $e){
                $this->ApiReturn(-1,'发生异常错误');
            }
        }else{
            $data['user_id'] = $this->user_id;
            $id = D('ActPassenger')->add($data);
            $msg = '添加成功';
        }
        if($id){
            $this->ApiReturn(1,$msg,array('id'=>$id));
        }
        $this->ApiReturn(-1,'操作失败');
    }

    /**
     * 获取行人
     */
    public function getPassenger()
    {
        $data = $this->data;
        $id = $data['id']?$data['id']:0;
        $item  = D('ActPassenger')->where(array('id'=>$id))->find();
        $this->ApiReturn(1,'成功',$item);
    }

    /**
     * 删除行人
     */
    public function deletePassenger()
    {
        $data = $this->data;
        $id = $data['id']?$data['id']:0;
        if($id){
            if(D('ActPassenger')->where(array('id'=>$id))->delete()){
                $this->ApiReturn(1,'删除成功');
            }
            $this->ApiReturn(-1,'删除失败');
        }
        $this->ApiReturn(-1,'缺少必传参数id');
    }


    /*
     *  支付
     */

    public function pay()
    {

        $data = $this->data;
        $id = $data['id']?$data['id']:$this->ApiReturn(-1,'缺少参数id');
        //1.支付宝 2.微信
        $pay_type = in_array($data['type'],[1,2])?$data['type']:$this->ApiReturn(-1,'请选择支付方式');
        $order = D('ActivityOrder')->where(array('id'=>$id))->find();
        if (!$order) $this->ApiReturn(-1,'订单不存在');
        if ($order['status'] != 1) $this->ApiReturn(-1,'订单不可支付');
        $passengers = M('act_order_detail')->where(['order_id'=>$id])->count();
        $activity = D('Activity')->where(array('id'=>$order['activity_id']))->field('shop_id,title,state,status,spell,spell_refund,people_num,spell_max')->find();
        if($activity['state'] != 1 || $activity['status'] != 1){
            $this->ApiReturn(-1,'该活动已下架或已结束');
        }
        $activity_attr = M('activity_attr')->where(['act_id'=>$order['activity_id'],'id'=>$order['attr_id']])->field('title,adult,child')->find();
        if(!$activity_attr) $this->ApiReturn(-1,'该套餐已下架或已结束');
        $start_time = M('around_time')->where(['item_id'=>$order['activity_id'],'id'=>$order['time_id']])->getField('start');
        if(!$start_time || strtotime($start_time)<time()) $this->ApiReturn(-1,'该出行日期已下架或已结束');
        $activity_order = D('ActivityOrder');
        $where = [
            'ao.activity_id'=>$order['activity_id'],
            'ao.attr_id'=>$order['attr_id'],
            'ao.time_id'=>$order['time_id'],
            'ao.status'=>2,
            'ao.id'=>['not in',$id]
        ];
        $number = $activity_order
            ->alias('ao')
            ->join('LEFT JOIN __ACT_ORDER_DETAIL__ aod on ao.id = aod.order_id')
            ->where($where)
            ->field("COUNT('aod.*') as num")
            ->find();
        //套餐活动 出行日期剩余的人数
        $remaining = $activity['people_num']-$number['num'];
        //判断剩余数量是否满足当前订单
        if ($remaining <= 0 || $remaining < $passengers) $this->ApiReturn(-1,'当前套餐的出行日期剩余数量不足，请重新选择');

        if ($pay_type == 1) {
            $Alipay = new AlipayController();
            $_REQUEST['order_sn'] = $order['sn'];
            $_REQUEST['type'] = 4;
            $Alipay->PayOrder();
        }
        if ($pay_type == 2) {
            $WxAppPay = new WxAppPayController();
            $_REQUEST['order_sn'] = $order['sn'];
            $_REQUEST['type'] = 4;
            $WxAppPay->PayOrder();
        }
    }


    /**
     *  提交评价
     */

    public function postComment()
    {
        $data = $this->data;
        $act_id = $data['act_id']?$data['act_id']:$this->ApiReturn(-1,'缺少必传参数act_id');

        if (D('Activity')->where(['id'=>$act_id,'can_comment'=>1])->getField('id')) {
            $comment_id = $data['comment_id']!=""?$data['comment_id']:0;
            $user_id = $data['user_id']?$data['user_id']:0;
            $content = $data['content']?$data['content']:$this->ApiReturn(-1,'请填写内容');
            if ($comment_id) {
                if (!D('ActivityComment')->where(['act_id'=>$act_id,'id'=>$comment_id])->getField('id'))
                    $this->ApiReturn(-1,'您要回复的评论不存在');
            }
            if ($user_id) {
                if (!$comment_id)  $this->ApiReturn(-1,'缺少comment_id');
                if (!D('ActivityComment')->where(['act_id'=>$act_id,'user_id'=>$user_id])->getField('id'))
                    $this->ApiReturn(-1,'您要回复的评论不存在');
            }
            $insert = array(
                'act_id'=>$act_id,
                'user_id'=>$this->user_id,
                'to_comment_id'=>$comment_id,
                'to_user_id'=>$user_id,
                'create_time'=>date('Y-m-d H:i:s'),
                'content'=>$content
            );
            $id =  D('ActivityComment')->add($insert);
            if ($id) {
                if ($user_id) {
                    $push = new \JPushSF(C('JPush.PAPPID'),C('JPush.PAPPSECRET'));
                    $alias = 'parent'.$user_id;
                    $receive = array('alias'=>[$alias]);//别名
                    $push->push($receive, 13, $act_id);
                }
                $this->ApiReturn(1,"成功",array('id'=>$id));
            }
            $this->ApiReturn(-1,'失败');
        }
        $this->ApiReturn(-1,'不可评论');
    }
}